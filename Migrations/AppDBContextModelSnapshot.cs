// <auto-generated />
using System;
using CoreAPi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Mywebsite.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreAPi.Models.FileUploadModel", b =>
                {
                    b.Property<string>("File_Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("FileName")
                        .IsRequired();

                    b.Property<long>("FileSize");

                    b.Property<string>("FileType")
                        .IsRequired();

                    b.Property<string>("FileUrl")
                        .IsRequired();

                    b.Property<string>("Member_Id")
                        .IsRequired();

                    b.HasKey("File_Id");

                    b.HasIndex("Member_Id");

                    b.ToTable("FileUploads");
                });

            modelBuilder.Entity("CoreAPi.Models.LearnOnlineModel", b =>
                {
                    b.Property<int>("Video_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Coursel_Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Coursel_TypeId")
                        .IsRequired();

                    b.Property<DateTime>("CreateTime");

                    b.Property<long>("Video_Size");

                    b.Property<double>("Video_Time");

                    b.Property<string>("Video_Type");

                    b.Property<string>("Video_Url");

                    b.HasKey("Video_Id");

                    b.ToTable("LearnOnlines");

                    b.HasData(
                        new { Video_Id = 1, Coursel_Name = "coursel", Coursel_TypeId = "1", CreateTime = new DateTime(2020, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), Video_Size = 30L, Video_Time = 456.0, Video_Type = "video", Video_Url = "123" }
                    );
                });

            modelBuilder.Entity("CoreAPi.Models.MemberModel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("AuthCode_Password");

                    b.Property<string>("AuthCode_Register");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("EmailCheck");

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Phone")
                        .HasMaxLength(20);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Service_Unit")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("member");
                });

            modelBuilder.Entity("CoreAPi.Models.NewsModel", b =>
                {
                    b.Property<int>("News_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("News_Content")
                        .IsRequired();

                    b.Property<string>("News_Title")
                        .IsRequired();

                    b.HasKey("News_Id");

                    b.ToTable("news");

                    b.HasData(
                        new { News_Id = 1, CreateTime = new DateTime(2020, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), News_Content = "news", News_Title = "台中科大" }
                    );
                });

            modelBuilder.Entity("Mywebsite.Models.CourseModel", b =>
                {
                    b.Property<int>("Course_Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseAddress")
                        .IsRequired();

                    b.Property<string>("CourseName")
                        .IsRequired();

                    b.Property<int>("CourseStatusId");

                    b.Property<DateTime>("CourseTime");

                    b.Property<int>("CourseTypeId");

                    b.HasKey("Course_Id");

                    b.HasIndex("CourseTypeId");

                    b.ToTable("Courses");

                    b.HasData(
                        new { Course_Id = 1, CourseAddress = "address", CourseName = "course", CourseStatusId = 0, CourseTime = new DateTime(2020, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), CourseTypeId = 1 }
                    );
                });

            modelBuilder.Entity("Mywebsite.Models.CourseTypeModel", b =>
                {
                    b.Property<int>("CourseTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseType")
                        .IsRequired();

                    b.HasKey("CourseTypeId");

                    b.ToTable("CourseTypes");

                    b.HasData(
                        new { CourseTypeId = 1, CourseType = "coursetype" }
                    );
                });

            modelBuilder.Entity("CoreAPi.Models.FileUploadModel", b =>
                {
                    b.HasOne("CoreAPi.Models.MemberModel", "members")
                        .WithMany("FileUploads")
                        .HasForeignKey("Member_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mywebsite.Models.CourseModel", b =>
                {
                    b.HasOne("Mywebsite.Models.CourseTypeModel", "CourseTypes")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
